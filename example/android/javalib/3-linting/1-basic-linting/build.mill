package build

import mill._
import mill.javalib.android.{AndroidSdkModule, AndroidLintModule}

// Create and configure an Android SDK module to manage Android SDK paths and tools.
object androidSdkModule0 extends AndroidSdkModule {
  def buildToolsVersion = "35.0.0"
  def bundleToolVersion = "1.17.2"
}

// Actual android application
object app extends AndroidLintModule {
  def androidSdkModule = mill.define.ModuleRef(androidSdkModule0)

  // Set path to the location of the project source codes
  def androidLintSources = Task { Some(PathRef(millSourcePath / "src" / "main" / "java")) }
  
  // Set path to the custom `lint.xml` config file. It is usually at the root of the project
  def androidLintConfigPath = Task { Some(PathRef(millSourcePath / "lint.xml")) }

  // Set path to generated `.jar` files in this case (or `.class` files)
  def androidLintClasspath = Task { Some(androidJar()) }
}

/** See Also: app/AndroidManifest.xml */
/** See Also: app/resources/values/colors.xml */
/** See Also: app/resources/values/strings.xml */
/** See Also: app/src/main/java/com/helloworld/app/MainActivity.java */
/** See Also: app/lint.xml */

// The `lint.xml` file shown above ignores the `MissingApplicationIcon` error in the code as
// the project is for demostration. There are no icons for the demo project.


/** Usage

> ./mill show app.androidLintRun  # Display full path to the linting report in HTML
".../out/app/androidLintRun.dest/report.html"

> cat out/app/androidLintRun.dest/report.html" # Display content of the linting report
Avoid hardcoding the debug mode; leaving it out allows debug and release builds to automatically assign one
...

> sed -i.bak 's/ android:debuggable="true"//g' app/AndroidManifest.xml # Fix the HardcodedDebugMode warning issue from `AndroidManifest.xml`

> ./mill app.androidLintRun # Rerun the android lint

> cat out/app/androidLintRun.dest/report.html" # Check the content of report again
No issues found.

*/

// This Mill build configuration includes a linting step, which is essential for ensuring code
// quality and adhering to best practices in Android development projects. Running the `androidLint` task
// produces a detailed HTML report identifying potential issues in the code, such as performance,
// security, and usability warnings. This helps maintain the health and quality of the codebase.
