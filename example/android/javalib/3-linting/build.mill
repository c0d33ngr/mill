// == Linting with Basic Config

// This Mill build configuration includes a linting step, which is essential for ensuring code
// quality and adhering to best practices in Android development projects. Running the `androidLintRun` task
// produces a detailed HTML report by default, identifying potential issues in the code, such as performance,
// security, and usability warnings. This helps maintain the health and quality of the codebase.

// In this example, we set a custom config to generate the report file in txt format and not HTML.

//// SNIPPET:BUILD
package build

import mill._
import mill.javalib.android.{AndroidSdkModule, AndroidLintModule}

// Create and configure an Android SDK module to manage Android SDK paths and tools.
object androidSdkModule0 extends AndroidSdkModule {
  def buildToolsVersion = "35.0.0"
  def bundleToolVersion = "1.17.2"
}

// Actual android application with linting config
object app extends AndroidLintModule {
  def androidSdkModule = mill.define.ModuleRef(androidSdkModule0)

  // Set path to the custom `lint.xml` config file. It is usually at the root of the project
  def androidLintConfigPath = Task { Some(PathRef(millSourcePath / "lint.xml")) }

  // Set the linting report to be generated as a text file
  def androidLintReportFmt = Task { "txt" }

  // Set path to generated `.jar` files in this case (or `.class` files)
  def classPath = Task.Source { androidJar() }

  // Set path to the location of the project source codes
  def sourcesPath = Task.Source { (millSourcePath / "src" / "main" / "java") }

  // Specify additional flag options for Android Lint not defined in `AndroidLintModule`
  def androidLintArgs: T[Seq[String]] = Task {
    Seq(
      "--classpath",
      classPath().path.toString,
      "--sources",
      sourcesPath().path.toString
    )
  }

}

/** See Also: app/AndroidManifest.xml */

// The `AndroidManifest.xml` file shown above is flawed with hardcoded string linting problem so it can be spoted by running the `androidLintRun` task.

/** See Also: app/resources/values/colors.xml */
/** See Also: app/resources/values/strings.xml */
/** See Also: app/src/main/java/com/helloworld/app/MainActivity.java */
/** See Also: app/lint.xml */

// The `lint.xml` file shown above ignores the `MissingApplicationIcon` error in the code as
// the project is for demostration. There are no icons for the demo project.

////SNIPPET:END

/** Usage

> ./mill show app.androidLintRun  # Display full path to the linting report in text file
".../out/app/androidLintRun.dest/report.txt"

> cat out/app/androidLintRun.dest/report.txt # Display content of the linting report
AndroidManifest.xml:3: Error: Avoid hardcoding the debug mode; leaving it out allows debug and release builds to automatically assign one [HardcodedDebugMode]

> sed -i.bak 's/ android:debuggable="true"//g' app/AndroidManifest.xml # Fix the HardcodedDebugMode warning issue from `AndroidManifest.xml`

> ./mill app.androidLintRun # Rerun it for new changes to reflect

> cat out/app/androidLintRun.dest/report.txt # Check the content of report again
No issues found.

*/

// == Linting with Custom Configurations

// The commands below set the serverity level of `MissingApplicationIcon` to `warning` in the `lint.xml` file that was shown above
// and run the `androidLintRun` task. Some output of the changes is shown below.

/** Usage

> sed -i.bak 's/severity="ignore"/severity="warning"/g' app/lint.xml # Set `MissingApplicationIcon` severity level to warning

> ./mill app.androidLintRun # Rerun it for new changes to reflect

> cat out/app/androidLintRun.dest/report.txt # Output the changes in the report
AndroidManifest.xml:3: Warning: Should explicitly set android:icon, there is no default [MissingApplicationIcon]

*/
